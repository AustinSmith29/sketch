;;;; sketch.lisp

(in-package #:sketch)

;;; "sketch" goes here. Hacks and glory await!

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                                                                  ;;;
;;;     _|_|_|  _|    _|  _|_|_|_|  _|_|_|_|_|    _|_|_|  _|    _|   ;;;
;;;   _|        _|  _|    _|            _|      _|        _|    _|   ;;;
;;;     _|_|    _|_|      _|_|_|        _|      _|        _|_|_|_|   ;;;
;;;         _|  _|  _|    _|            _|      _|        _|    _|   ;;;
;;;   _|_|_|    _|    _|  _|_|_|_|      _|        _|_|_|  _|    _|   ;;;
;;;                                                                  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Sketch class

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *default-sketch-slots*
    '((title :initform "Sketch" :reader sketch-title :initarg :sketch-title)
      (width :initform 400 :reader sketch-width :initarg :sketch-width)
      (height :initform 400 :reader sketch-height :initarg :sketch-height)
      (fullscreen :initform nil :reader sketch-fullscreen :initarg :sketch-fullscreen)
      (copy-pixels :initform nil :accessor sketch-copy-pixels :initarg :sketch-copy-pixels)
      (y-axis :initform :down :reader sketch-y-axis :initarg :sketch-y-axis))))

(defmacro define-sketch-class ()
  `(defclass sketch (kit.sdl2:gl-window)
     ((%env :initform (make-env))
      (%restart :initform t)
      ,@*default-sketch-slots*)))

(define-sketch-class)

;;; Non trivial sketch writers

(defmacro define-sketch-writer (slot &body body)
  `(defmethod (setf ,(alexandria:symbolicate 'sketch- slot)) (value (instance sketch))
     (setf (slot-value instance ',slot) value)
     (let ((win (kit.sdl2:sdl-window instance)))
       ,@body)))

(define-sketch-writer title
  (sdl2:set-window-title win (slot-value instance 'title)))

(define-sketch-writer width
  (sdl2:set-window-size win (slot-value instance 'width)
			(slot-value instance 'height)))

(define-sketch-writer height
  (sdl2:set-window-size win (slot-value instance 'width)
			(slot-value instance 'height)))

(define-sketch-writer fullscreen
  (sdl2:set-window-fullscreen win (slot-value instance 'fullscreen)))

(define-sketch-writer y-axis
  (declare (ignore win))
  (with-slots ((env %env) width height y-axis) instance
    (setf (env-view-matrix env)
	  (if (eq y-axis :down)
	      (kit.glm:ortho-matrix 0 width height 0 -1 1)
	      (kit.glm:ortho-matrix 0 width 0 height -1 1)))
    (kit.gl.shader:uniform-matrix
     (env-programs env) :view-m 4 (vector (env-view-matrix env)))))

;;; Generic functions

(defgeneric prepare (instance &key &allow-other-keys)
  (:documentation "Generated by DEFSKETCH.")
  (:method-combination progn :most-specific-last))

(defgeneric setup (instance &key &allow-other-keys)
  (:documentation "Called before creating the sketch window.")
  (:method ((instance sketch) &key &allow-other-keys) ()))

(defgeneric draw (instance &key &allow-other-keys)
  (:documentation "Called repeatedly after creating the sketch window,
used for drawing, 60fps.")
  (:method ((instance sketch) &key &allow-other-keys) ()))

;;; Initialization

(defparameter *sketch-initialized* nil)

(defun initialize-sketch ()
  (unless *sketch-initialized*
    (setf *sketch-initialized* t)
    (kit.sdl2:start)
    (sdl2-ttf:init)
    (sdl2:in-main-thread ()
      (sdl2:gl-set-attr :multisamplebuffers 1)
      (sdl2:gl-set-attr :multisamplesamples 4)

      (sdl2:gl-set-attr :context-major-version 3)
      (sdl2:gl-set-attr :context-minor-version 3)
      (sdl2:gl-set-attr :context-profile-mask 1))))

(defmethod initialize-instance :before ((instance sketch) &rest initargs &key &allow-other-keys)
  (initialize-sketch))

(defmethod initialize-instance :after ((instance sketch) &rest initargs &key &allow-other-keys)
  (initialize-environment instance)
  (apply #'prepare (list* instance initargs))
  (initialize-gl instance))

;;; Rendering

(defmacro gl-catch (error-color &body body)
  `(handler-case
       (progn
	 ,@body)
     (error (e)
       (progn
	 (background ,error-color)
	 (with-font (make-error-font)
	   (with-identity-matrix
	     (text "ERROR" 20 20)
	     (text (format nil "~a" e) 20 40)
	     (text "Click for restarts." 20 60)))
	 (setf %restart t
	       (env-red-screen *env*) t)))))

(defun draw-window (window)
  (start-draw)
  (draw window)
  (end-draw))

(defmethod kit.sdl2:render ((instance sketch))
  (with-slots (%env %restart width height copy-pixels) instance
    (with-environment %env
      (with-pen (make-default-pen)
	(with-font (make-default-font)
	  (with-identity-matrix
	    (unless copy-pixels
	      (background (gray 0.4)))
	    ;; Restart sketch on setup and when recovering from an error.
	    (when %restart
	      (gl-catch (rgb 1 1 0.3)
		(setup instance))
	      (setf (slot-value instance '%restart) nil))
	    ;; If we're in the debug mode, we exit from it immediately,
	    ;; so that the restarts are shown only once. Afterwards, we
	    ;; continue presenting the user with the red screen, waiting for
	    ;; the error to be fixed, or for the debug key to be pressed again.
	    (if (debug-mode-p)
		(progn
		  (exit-debug-mode)
		  (draw-window instance))
		(gl-catch (rgb 0.7 0 0)
		  (draw-window instance)))))))))

;;; Default events

(defmethod close-window :before ((instance sketch))
  (with-environment (slot-value instance '%env)
    (loop for resource being the hash-values of (env-resources *env*)
       do (free-resource resource))))

;;; DEFSKETCH helpers

(defun first-two (list)
  (list (first list) (second list)))

(defun interned-binding (binding)
  (alexandria:symbolicate (car binding)))

(defun default-sketch-slot-p (slot-or-binding)
  (let ((defaults (mapcar #'car *default-sketch-slots*)))
    (typecase slot-or-binding
      (list (member (car slot-or-binding) defaults))
      (t (member slot-or-binding defaults)))))

(defun default-bindings ()
  (mapcar (lambda (slot)
	    (list (interned-binding slot) (getf (cdr slot) :initform)))
	  *default-sketch-slots*))

(defun binding-accessor (sketch binding)
  (if (default-sketch-slot-p binding)
      (alexandria:symbolicate 'sketch- (car binding))
      (or (cadr (member :accessor (cddr binding)))
	  (alexandria:symbolicate sketch '- (car binding)))))

(defun make-slot-form (sketch binding)
  `(,(car binding)
     :initarg ,(alexandria:make-keyword (car binding))
     :accessor ,(binding-accessor sketch binding)))

;;; DEFSKETCH channels

(defun channel-binding-p (binding)
  (and (consp (cadr binding)) (eql 'in (caadr binding))))

(defun make-channel-observer (sketch binding)
  `(define-channel-observer
     (let ((win (kit.sdl2:last-window)))
       (when win
	 (setf (,(binding-accessor sketch binding) win) ,(cadr binding))))))

(defun make-channel-observers (sketch bindings)
  (mapcar (lambda (binding)
	    (when (channel-binding-p binding)
	      (make-channel-observer sketch binding)))
	  bindings))

(defun replace-channels-with-values (bindings)
  (loop for binding in bindings
     collect (list (interned-binding binding)
		   (if (channel-binding-p binding)
		       (caddr (cadr binding))
		       (cadr binding)))))

;;; DEFSKETCH bindings

(defun window-parameter-bindings (window-parameters)
  (loop for (param . value) in (alexandria:plist-alist window-parameters)
     when (or (atom value) (> (length value) 1))
     collect (list (alexandria:symbolicate param)
		   (if (atom value) value (second value)))
     unless (atom value)
     collect (list (first value) (alexandria:symbolicate param))))

(defun window-parameter-aliases (window-parameters)
  (loop for (param . value) in (alexandria:plist-alist window-parameters)
     when (listp value)
     collect (list (first value) (alexandria:symbolicate param))))

(defun bindings-without-aliases (bindings window-parameters)
  (let ((aliases (mapcar #'first (window-parameter-aliases window-parameters))))
    (remove-if (lambda (binding)
		 (member (first binding) aliases))
	       bindings)))

(defun sketch-bindings-to-slots (sketch window-parameters bindings)
  (let* ((aliases (window-parameter-aliases window-parameters))
	 (bindings (bindings-without-aliases bindings window-parameters)))
    (mapcar (lambda (x) (make-slot-form sketch x)) bindings)))

;;; DEFSKETCH setf instructions

(defun make-window-parameter-setf ()
  `(setf ,@(mapcan (lambda (slot)
		     `((,(alexandria:symbolicate 'sketch- (car slot)) instance) ,(interned-binding slot)))
		   *default-sketch-slots*)))

(defun make-custom-slots-setf (sketch bindings)
  `(setf ,@(mapcan (lambda (binding)
		     `((,(binding-accessor sketch binding) instance) ,(interned-binding binding)))
		   bindings)))

(defun make-reinitialize-setf ()
  `(setf ,@(mapcan (lambda (slot)
		     `((,(alexandria:symbolicate 'sketch- (car slot)) instance)
		       (,(alexandria:symbolicate 'sketch- (car slot)) instance)))
		   *default-sketch-slots*)))

;;; DEFSKETCH macro

(defmacro defsketch (sketch-name window-parameters bindings &body body)
  `(progn
     (defclass ,sketch-name (sketch)
       ,(sketch-bindings-to-slots `,sketch-name window-parameters bindings))

     ,@(remove-if-not #'identity (make-channel-observers sketch-name bindings))

     (defmethod prepare progn ((instance ,sketch-name) &rest initargs &key &allow-other-keys)
       (let* (,@(default-bindings)
	      ,@(window-parameter-bindings window-parameters)
	      ,@(mapcar #'first-two (replace-channels-with-values bindings))
	      ,@(mapcar (lambda (x) (list (second x) (first x)))
			(window-parameter-aliases window-parameters)))
	 (declare (ignorable ,@(mapcar #'interned-binding *default-sketch-slots*)))
	 ,(make-window-parameter-setf)
	 ,(make-custom-slots-setf sketch-name
				  (bindings-without-aliases bindings window-parameters))
	 (apply #'reinitialize-instance (list* instance initargs))
	 ,(make-reinitialize-setf)))

     (defmethod draw ((instance ,sketch-name) &key &allow-other-keys)
       (with-accessors ,(mapcar (lambda (x) (list (interned-binding x) (alexandria:symbolicate 'sketch- (car x))))
				*default-sketch-slots*) instance
	 (with-slots ,(mapcar #'car (bindings-without-aliases bindings window-parameters)) instance
	   ,@body)))))
